stages:
  - test
  - build
  - lint
  - deploy

variables:
  COMPONENT: fleet-management-service
  NAMESPACE: atom-portal

include:
  - project: 'b2b-portal/infrastucture/ci-templates'
    ref: main
    file:
      - 'deploy-to-k8s-nexus-chart.gitlab-ci.yml'

test:
  stage: test
  image: python:3.10-bullseye
  tags:
    - k8s
  script:
    - pip install pipenv
    - pipenv install
    - pipenv sync --dev
    - echo KEYCLOAK_SERVER_URL=fake >> .env
    - echo KEYCLOAK_CLIENT_ID=fake >> .env
    - echo KEYCLOAK_REALM_NAME=fake >> .env
    - echo KEYCLOAK_CLIENT_SECRET_KEY=fake >> .env
    - pipenv run coverage run -m pytest -s -vv -x --junitxml=test-report.xml
    - pipenv run coverage report
    - pipenv run coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: test-report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build_image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    DOCKER_CONFIG: /kaniko/.docker
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --use-new-run
      --context "${CI_PROJECT_DIR}"
      --dockerfile ${CI_PROJECT_DIR}/Dockerfile
      --build-arg GITLAB_CI_PROJECT_ID="$CI_PROJECT_ID"
      --build-arg GITLAB_CI_PROJECT_URL="$CI_PROJECT_URL"
      --build-arg GITLAB_CI_PIPELINE_ID="$CI_PIPELINE_ID"
      --build-arg GITLAB_CI_PIPELINE_URL="$CI_PIPELINE_URL"
      --build-arg GITLAB_CI_COMMIT_TAG="$CI_COMMIT_TAG"
      --build-arg GITLAB_CI_PROJECT_TITLE="$CI_PROJECT_TITLE"
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      --destination $CI_REGISTRY_IMAGE:${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
      --cache=true
      --cache-ttl=100h
  tags:
    - k8s

deploy_to_dev:
  extends: .deploy-to-k8s
  variables:
    KUBECONFIG: './.kube_config'
    K8S_CONFIG: K8S_YC_CONFIG_STAND_DEV
    K8S_ENV: dev
  only:
    - develop
    - deploy
    - main
  when: manual
